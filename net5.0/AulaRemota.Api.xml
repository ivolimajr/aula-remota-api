<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AulaRemota.Api</name>
    </assembly>
    <members>
        <member name="T:AulaRemota.Api.Controllers.AuthController">
            <summary>
            Endpoints para obter o token e refreshToken
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthController.GetToken(AulaRemota.Core.Auth.GenerateToken.GenerateTokenInput)">
            <summary>
            Obter o token para consumo da API
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Retorna o Token bearer</response>
            <response code="401">Provavelmente você não tem acesso a API</response>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthController.Refresh(AulaRemota.Core.Auth.RefreshToken.RefreshTokenInput)">
            <summary>
            Atualizar o Token
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Atualiza o Token</response>
            <response code="401">RefreshToken inválido</response>
        </member>
        <member name="T:AulaRemota.Api.Controllers.AuthUserController">
            <summary>
            Lista os EndPoints para obter acesso a API.
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthUserController.GetAll">
            <summary>
            Retorna todos os usuário com acesso a API
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthUserController.Get(System.Int32)">
            <summary>
            Retorna um usuário informando o ID como parâmetro
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthUserController.Post(AulaRemota.Core.AuthUser.Criar.AuthUserCriarInput)">
            <summary>
            Cadastra um novo usuário para consumir a API
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthUserController.Put(AulaRemota.Core.AuthUser.Atualizar.AuthUserAtualizarInput)">
            <summary>
            Atualiza um usuário da API
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AuthUserController.Delete(System.Int32)">
            <summary>
            Remove um usuário da API
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.AutoEscolaController">
            <summary>g
            Lista os EndPoints para gerenciar os usuários dos Parceiros - DETRANS
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.GetAll">
            <summary>
            Retorna um Array de items com os parceiros
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.Get(System.Int32)">
            <summary>
            Retorna um item com o parceiro solicitado por ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.Post(AulaRemota.Core.AutoEscola.Criar.AutoEscolaCriarInput)">
            <summary>
            Insere um novo parceiro
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.Put(AulaRemota.Core.Parceiro.Atualizar.ParceiroAtualizarInput)">
            <summary>
            Atualiza um parceiro
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.Delete(System.Int32)">
            <summary>
            Remove um parceiro
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.AutoEscolaController.ArquivoDownload(AulaRemota.Core.Arquivo.Download.ArquivoDownloadInput)">
            <summary>
            Remove um parceiro
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.EdrivingCargoController">
            <summary>g
            Lista os EndPoints de retorno, lista apenas os cargos referente aos usuários responsáveis pelo Edriving
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingCargoController.GetAll">
            <summary>
            Retorna todos
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingCargoController.Get(System.Int32)">
            <summary>
            Retorna apenas um
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.EdrivingController">
            <summary>g
            Lista os EndPoints para gerenciar os usuários do Edriving
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingController.GetAll">
            <summary>
            Retorna um Array de items com os usuários da plataforma
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingController.Get(System.Int32)">
            <summary>
            Retorna um item com o usuário solicitado por ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingController.Post(AulaRemota.Core.Edriving.Criar.EdrivingCriarInput)">
            <summary>
            Insere um novo usuário
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingController.Put(AulaRemota.Core.Edriving.Atualizar.EdrivingAtualizarInput)">
            <summary>
            Atualiza um usuário
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.EdrivingController.Delete(System.Int32)">
            <summary>
            Remove um usuário
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.ParceiroCargoController">
            <summary>g
            Lista os EndPoints de retorno, lista apenas os cargos referente aos parceiros
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroCargoController.GetAll">
            <summary>
            Retorna todos
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroCargoController.Get(System.Int32)">
            <summary>
            Retorna apena um
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.ParceiroController">
            <summary>g
            Lista os EndPoints para gerenciar os usuários dos Parceiros - DETRANS
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroController.GetAll">
            <summary>
            Retorna um Array de items com os parceiros
            </summary>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroController.Get(System.Int32)">
            <summary>
            Retorna um item com o parceiro solicitado por ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroController.Post(AulaRemota.Core.Parceiro.Criar.ParceiroCriarInput)">
            <summary>
            Insere um novo parceiro
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroController.Put(AulaRemota.Core.Parceiro.Atualizar.ParceiroAtualizarInput)">
            <summary>
            Atualiza um parceiro
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.ParceiroController.Delete(System.Int32)">
            <summary>
            Remove um parceiro
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.Controllers.UsuarioController">
            <summary>
            Lista os EndPoints para gerenciar o usuário, tanto Edriving, auto escola, parceiro
            </summary>
        </member>
        <member name="M:AulaRemota.Api.Controllers.UsuarioController.Login(AulaRemota.Core.Usuario.Login.UsuarioLoginInput)">
            <summary>
            Endpoint para fazer login na plataforma
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Atualiza o Token</response>
            <response code="401">RefreshToken inválido</response>
        </member>
        <member name="M:AulaRemota.Api.Controllers.UsuarioController.AlterarSenha(AulaRemota.Core.Usuario.AtualizarSenha.UsuarioAtualizarSenhaInput)">
            <summary>
            Endpoint alterar a senha do usuario pelo ID
            </summary>
            <param name="request"></param>
            <returns></returns>
            <response code="200">Atualiza o Token</response>
            <response code="401">RefreshToken inválido</response>
        </member>
        <member name="M:AulaRemota.Api.Controllers.UsuarioController.AlterarSenhaPorEmail(AulaRemota.Core.Usuario.AtualizarSenhaPorEmail.UsuarioAtualizarSenhaPorEmailInput)">
            <summary>
            Endpoint alterar a senha do usuario pelo email
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.UsuarioController.Delete(System.Int32)">
            <summary>
            Remove o telefone de um usuário
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AulaRemota.Api.Controllers.UsuarioController.AtualizarEndereco(AulaRemota.Core.Usuario.AtualizarEndereco.UsuarioAtualizarEnderecoInput)">
            <summary>
            Atualizar endereço de um usuário
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:AulaRemota.Api.GlobalStaticResources">
            <summary>
            Contains all the static resources defined for the application
            </summary>
        </member>
    </members>
</doc>
