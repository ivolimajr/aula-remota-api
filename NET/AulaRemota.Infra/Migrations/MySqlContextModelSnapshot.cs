// <auto-generated />
using System;
using AulaRemota.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AulaRemota.Infra.Migrations
{
    [DbContext(typeof(MySqlContext))]
    partial class MySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("ApiUserModelRolesModel", b =>
                {
                    b.Property<int>("ApiUsersId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("ApiUsersId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ApiUserModelRolesModel");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.AddressModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Cidade")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EnderecoLogradouro")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Uf")
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.Auth.ApiUserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ApiUser");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Orgão")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Administrativo");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.CourseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolasId")
                        .HasColumnType("int");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolasId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DataFundacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Site")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("AutoEscola");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Orgão")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Orgao")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("TurmaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.TurmaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("InstrutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.EdrivingLevelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("EdrivingCargo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "ADMINISTRATIVO"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "ANALISTA"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "DIRETOR"
                        });
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.EdrivingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Edriving");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Destino")
                        .HasColumnType("longtext");

                    b.Property<string>("Formato")
                        .HasColumnType("longtext");

                    b.Property<int?>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PartnnerLevelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("ParceiroCargo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "ADMINISTRATIVO"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "ANALISTA"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "DIRETOR"
                        });
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PartnnerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Parceiro");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PhoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativoId")
                        .HasColumnType("int");

                    b.Property<int?>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<int?>("EdrivingId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<int?>("ParceiroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("EdrivingId");

                    b.HasIndex("InstrutorId");

                    b.HasIndex("ParceiroId");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.RolesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("CourseModelTurmaModel", b =>
                {
                    b.Property<int>("CursosId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasId")
                        .HasColumnType("int");

                    b.HasKey("CursosId", "TurmasId");

                    b.HasIndex("TurmasId");

                    b.ToTable("CourseModelTurmaModel");
                });

            modelBuilder.Entity("DrivingSchoolModelInstructorModel", b =>
                {
                    b.Property<int>("AutoEscolasId")
                        .HasColumnType("int");

                    b.Property<int>("InstrutoresId")
                        .HasColumnType("int");

                    b.HasKey("AutoEscolasId", "InstrutoresId");

                    b.HasIndex("InstrutoresId");

                    b.ToTable("DrivingSchoolModelInstructorModel");
                });

            modelBuilder.Entity("RolesModelUserModel", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("RolesModelUserModel");
                });

            modelBuilder.Entity("ApiUserModelRolesModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.Auth.ApiUserModel", null)
                        .WithMany()
                        .HasForeignKey("ApiUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.RolesModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscola")
                        .WithMany("Administrativos")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.AddressModel", "Endereco")
                        .WithOne("Administrativo")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("Administrativo")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.CourseModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscolas")
                        .WithMany("Cursos")
                        .HasForeignKey("AutoEscolasId");

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "Instrutor")
                        .WithMany("Cursos")
                        .HasForeignKey("InstrutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscolas");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.AddressModel", "Endereco")
                        .WithOne("AutoEscola")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("AutoEscola")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.AddressModel", "Endereco")
                        .WithOne("Instrutor")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("Instrutor")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.StudentModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscola")
                        .WithMany("Alunos")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.AddressModel", "Endereco")
                        .WithMany("Alunos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.TurmaModel", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("Aluno")
                        .HasForeignKey("AulaRemota.Infra.Entity.DrivingSchool.StudentModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Endereco");

                    b.Navigation("Turma");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.TurmaModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscola")
                        .WithMany("Turmas")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "Instrutor")
                        .WithMany()
                        .HasForeignKey("InstrutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.EdrivingModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.EdrivingLevelModel", "Cargo")
                        .WithMany("Edrivings")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("Edriving")
                        .HasForeignKey("AulaRemota.Infra.Entity.EdrivingModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.FileModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscola")
                        .WithMany("Arquivos")
                        .HasForeignKey("AutoEscolaId");

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "Instrutor")
                        .WithMany("Arquivos")
                        .HasForeignKey("InstrutorId");

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PartnnerModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.PartnnerLevelModel", "Cargo")
                        .WithMany("Parceiros")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.AddressModel", "Endereco")
                        .WithOne("Parceiro")
                        .HasForeignKey("AulaRemota.Infra.Entity.PartnnerModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", "Usuario")
                        .WithOne("Parceiro")
                        .HasForeignKey("AulaRemota.Infra.Entity.PartnnerModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PhoneModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", "Administrativo")
                        .WithMany("Telefones")
                        .HasForeignKey("AdministrativoId");

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.StudentModel", "Aluno")
                        .WithMany("Telefones")
                        .HasForeignKey("AlunoId");

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", "AutoEscola")
                        .WithMany("Telefones")
                        .HasForeignKey("AutoEscolaId");

                    b.HasOne("AulaRemota.Infra.Entity.EdrivingModel", "Edriving")
                        .WithMany("Telefones")
                        .HasForeignKey("EdrivingId");

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", "Instrutor")
                        .WithMany("Telefones")
                        .HasForeignKey("InstrutorId");

                    b.HasOne("AulaRemota.Infra.Entity.PartnnerModel", "Parceiro")
                        .WithMany("Telefones")
                        .HasForeignKey("ParceiroId");

                    b.Navigation("Administrativo");

                    b.Navigation("Aluno");

                    b.Navigation("AutoEscola");

                    b.Navigation("Edriving");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("CourseModelTurmaModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("CursosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.TurmaModel", null)
                        .WithMany()
                        .HasForeignKey("TurmasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrivingSchoolModelInstructorModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", null)
                        .WithMany()
                        .HasForeignKey("AutoEscolasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", null)
                        .WithMany()
                        .HasForeignKey("InstrutoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolesModelUserModel", b =>
                {
                    b.HasOne("AulaRemota.Infra.Entity.RolesModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Infra.Entity.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.AddressModel", b =>
                {
                    b.Navigation("Administrativo");

                    b.Navigation("Alunos");

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.AdministrativeModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.DrivingSchoolModel", b =>
                {
                    b.Navigation("Administrativos");

                    b.Navigation("Alunos");

                    b.Navigation("Arquivos");

                    b.Navigation("Cursos");

                    b.Navigation("Telefones");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.InstructorModel", b =>
                {
                    b.Navigation("Arquivos");

                    b.Navigation("Cursos");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.StudentModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.DrivingSchool.TurmaModel", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.EdrivingLevelModel", b =>
                {
                    b.Navigation("Edrivings");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.EdrivingModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PartnnerLevelModel", b =>
                {
                    b.Navigation("Parceiros");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.PartnnerModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Infra.Entity.UserModel", b =>
                {
                    b.Navigation("Administrativo");

                    b.Navigation("Aluno");

                    b.Navigation("AutoEscola");

                    b.Navigation("Edriving");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });
#pragma warning restore 612, 618
        }
    }
}
