// <auto-generated />
using System;
using AulaRemota.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AulaRemota.Infra.Migrations
{
    [DbContext(typeof(MySqlContext))]
    partial class MySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("AulaRemota.Core.Entity.Auth.ApiUserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("apiUser");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Orgão")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Administrativo");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AlunoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Orgao")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("TurmaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaCargoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AutoEscolaCargo");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DataFundacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("AutoEscola");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.CursoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolasId")
                        .HasColumnType("int");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolasId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Aniversario")
                        .HasColumnType("datetime");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Identidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Orgão")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.TelefoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdministrativoId")
                        .HasColumnType("int");

                    b.Property<int?>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<int?>("EdrivingId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<int?>("ParceiroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("EdrivingId");

                    b.HasIndex("InstrutorId");

                    b.HasIndex("ParceiroId");

                    b.ToTable("telefone");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.TurmaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime");

                    b.Property<int>("InstrutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EdrivingCargoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Cargo");

                    b.ToTable("EdrivingCargo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "DIRETOR"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "ANALISTA"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "ADMINISTRATIVO"
                        });
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EdrivingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("Nome");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Edriving");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EnderecoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Cep")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EnderecoLogradouro")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Numero")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("endereco");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.ParceiroCargoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Cargo");

                    b.ToTable("ParceiroCargo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "DIRETOR"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "ANALISTA"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "ADMINISTRATIVO"
                        });
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.ParceiroModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("Nome");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Parceiro");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.UsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("NivelAcesso")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nome");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Models.ArquivoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AutoEscolaId")
                        .HasColumnType("int");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("InstrutorId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AutoEscolaId");

                    b.HasIndex("InstrutorId");

                    b.ToTable("Arquivo");
                });

            modelBuilder.Entity("AutoEscolaModelInstrutorModel", b =>
                {
                    b.Property<int>("AutoEscolasId")
                        .HasColumnType("int");

                    b.Property<int>("InstrutoresId")
                        .HasColumnType("int");

                    b.HasKey("AutoEscolasId", "InstrutoresId");

                    b.HasIndex("InstrutoresId");

                    b.ToTable("AutoEscolaModelInstrutorModel");
                });

            modelBuilder.Entity("CursoModelTurmaModel", b =>
                {
                    b.Property<int>("CursosId")
                        .HasColumnType("int");

                    b.Property<int>("TurmasId")
                        .HasColumnType("int");

                    b.HasKey("CursosId", "TurmasId");

                    b.HasIndex("TurmasId");

                    b.ToTable("CursoModelTurmaModel");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscola")
                        .WithMany("Administrativos")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaCargoModel", "Cargo")
                        .WithMany("Administrativos")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.EnderecoModel", "Endereco")
                        .WithOne("Administrativo")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("Administrativo")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AlunoModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscola")
                        .WithMany("Alunos")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.EnderecoModel", "Endereco")
                        .WithMany("Alunos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.TurmaModel", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("Aluno")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.AlunoModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Endereco");

                    b.Navigation("Turma");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaCargoModel", "Cargo")
                        .WithMany("AutoEscolas")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.EnderecoModel", "Endereco")
                        .WithOne("AutoEscola")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("AutoEscola")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.CursoModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscolas")
                        .WithMany("Cursos")
                        .HasForeignKey("AutoEscolasId");

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "Instrutor")
                        .WithMany("Cursos")
                        .HasForeignKey("InstrutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscolas");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaCargoModel", "Cargo")
                        .WithMany("Instrutores")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.EnderecoModel", "Endereco")
                        .WithOne("Instrutor")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("Instrutor")
                        .HasForeignKey("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.TelefoneModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", "Administrativo")
                        .WithMany("Telefones")
                        .HasForeignKey("AdministrativoId");

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AlunoModel", "Aluno")
                        .WithMany("Telefones")
                        .HasForeignKey("AlunoId");

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscola")
                        .WithMany("Telefones")
                        .HasForeignKey("AutoEscolaId");

                    b.HasOne("AulaRemota.Core.Entity.EdrivingModel", "Edriving")
                        .WithMany("Telefones")
                        .HasForeignKey("EdrivingId");

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "Instrutor")
                        .WithMany("Telefones")
                        .HasForeignKey("InstrutorId");

                    b.HasOne("AulaRemota.Core.Entity.ParceiroModel", "Parceiro")
                        .WithMany("Telefones")
                        .HasForeignKey("ParceiroId");

                    b.Navigation("Administrativo");

                    b.Navigation("Aluno");

                    b.Navigation("AutoEscola");

                    b.Navigation("Edriving");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.TurmaModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscola")
                        .WithMany("Turmas")
                        .HasForeignKey("AutoEscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "Instrutor")
                        .WithMany()
                        .HasForeignKey("InstrutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EdrivingModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.EdrivingCargoModel", "Cargo")
                        .WithMany("Edrivings")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("Edriving")
                        .HasForeignKey("AulaRemota.Core.Entity.EdrivingModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.ParceiroModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.ParceiroCargoModel", "Cargo")
                        .WithMany("Parceiros")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.EnderecoModel", "Endereco")
                        .WithOne("Parceiro")
                        .HasForeignKey("AulaRemota.Core.Entity.ParceiroModel", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.UsuarioModel", "Usuario")
                        .WithOne("Parceiro")
                        .HasForeignKey("AulaRemota.Core.Entity.ParceiroModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AulaRemota.Core.Models.ArquivoModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", "AutoEscola")
                        .WithMany("Arquivos")
                        .HasForeignKey("AutoEscolaId");

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", "Instrutor")
                        .WithMany("Arquivos")
                        .HasForeignKey("InstrutorId");

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");
                });

            modelBuilder.Entity("AutoEscolaModelInstrutorModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", null)
                        .WithMany()
                        .HasForeignKey("AutoEscolasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", null)
                        .WithMany()
                        .HasForeignKey("InstrutoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoModelTurmaModel", b =>
                {
                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.CursoModel", null)
                        .WithMany()
                        .HasForeignKey("CursosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AulaRemota.Core.Entity.Auto_Escola.TurmaModel", null)
                        .WithMany()
                        .HasForeignKey("TurmasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AdministrativoModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AlunoModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaCargoModel", b =>
                {
                    b.Navigation("Administrativos");

                    b.Navigation("AutoEscolas");

                    b.Navigation("Instrutores");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.AutoEscolaModel", b =>
                {
                    b.Navigation("Administrativos");

                    b.Navigation("Alunos");

                    b.Navigation("Arquivos");

                    b.Navigation("Cursos");

                    b.Navigation("Telefones");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.InstrutorModel", b =>
                {
                    b.Navigation("Arquivos");

                    b.Navigation("Cursos");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.Auto_Escola.TurmaModel", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EdrivingCargoModel", b =>
                {
                    b.Navigation("Edrivings");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EdrivingModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.EnderecoModel", b =>
                {
                    b.Navigation("Administrativo");

                    b.Navigation("Alunos");

                    b.Navigation("AutoEscola");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.ParceiroCargoModel", b =>
                {
                    b.Navigation("Parceiros");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.ParceiroModel", b =>
                {
                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("AulaRemota.Core.Entity.UsuarioModel", b =>
                {
                    b.Navigation("Administrativo");

                    b.Navigation("Aluno");

                    b.Navigation("AutoEscola");

                    b.Navigation("Edriving");

                    b.Navigation("Instrutor");

                    b.Navigation("Parceiro");
                });
#pragma warning restore 612, 618
        }
    }
}
